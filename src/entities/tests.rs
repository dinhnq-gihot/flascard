//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use {
    super::sea_orm_active_enums::StatusEnum,
    sea_orm::entity::prelude::*,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tests")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub quiz_id: Uuid,
    pub user_id: Uuid,
    pub score: Option<i32>,
    pub started_at: Option<DateTime>,
    pub submitted_at: Option<DateTime>,
    pub duration: i32,
    pub current_quiz_question_id: Uuid,
    pub remaining_time: i32,
    pub completed_questions: i32,
    pub total_question: i32,
    pub status: StatusEnum,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::quiz_questions::Entity",
        from = "Column::CurrentQuizQuestionId",
        to = "super::quiz_questions::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    QuizQuestions,
    #[sea_orm(
        belongs_to = "super::quizes::Entity",
        from = "Column::QuizId",
        to = "super::quizes::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Quizes,
    #[sea_orm(has_many = "super::test_results::Entity")]
    TestResults,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::quiz_questions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::QuizQuestions.def()
    }
}

impl Related<super::quizes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Quizes.def()
    }
}

impl Related<super::test_results::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TestResults.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
